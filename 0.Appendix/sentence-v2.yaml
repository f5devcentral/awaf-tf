openapi: 3.0.1
info:
  title: API Sentence Generator
  description: list of attributes
  version: '2.0'
servers:
- url: http://10.1.20.7/api
paths:
  /colors:
    get:
      description: List all colors
      operationId: listColors
      tags:
        - colors
      responses:
        '200':
          description: a list of colors with their index
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Colors"
              #examples: {"colors": [{"id":1,"name":"blue"}]}
    post:
      description: create a color
      operationId: createColor
      tags:
        - colors
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                id:
                  type: integer
            examples:
              '0':
                value: '{"name":"yellow"}'
              '1':
                value: '{"id":4}'
      responses:
        '201':
          description: color created
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              examples: {}
    delete:
      description: delete a color
      operationId: deleteColor
      tags:
        - colors      
      responses:
        '404':
          description: Auto generated using Swagger Inspector
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              examples: {}
      servers:
        - url: 'http://colors:8080'
    servers:
      - url: 'http://colors:8080'
  /colors/{id}:
    get:
      description: get a specific color
      operationId: showColorById
      tags:
        - colors
      parameters:
        - name: id
          in: path
          required: true
          description: id of the color to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Successful
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/Color"
              # examples: {"colors": [{"id":1,"name":"blue"}]}
  /adjectives:
    get:
      description: List all adjectives
      operationId: listAdjectives
      tags:
        - adjectives
      responses:
        '200':
          description: a list of adjectives with their index
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Adjectives"
              #examples: {"adjectives": [{"id":1,"name":"blue"}]}
    post:
      description: create an adjective
      operationId: createAdjective
      tags:
        - adjectives
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                id:
                  type: integer
            examples:
              '0':
                value: '{"name":"calm"}'
              '1':
                value: '{"id":2}'
      responses:
        '201':
          description: adjective created
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              examples: {}
    delete:
      description: delete an adjective
      operationId: deleteAdjective
      tags:
        - adjectives
      responses:
        '404':
          description: Delete an Adjective
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              examples: {}
  /adjectives/{id}:
    get:
      description: get a specific adjective
      operationId: showAdjectiveById
      tags:
        - adjectives
      parameters:
        - name: id
          in: path
          required: true
          description: id of the adjective to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Successful
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/Adjective"
              # examples: {"adjectives": [{"id":1,"name":"blue"}]}
  /animals:
    get:
      description: List all animals
      operationId: listAnimals
      tags:
        - animals
      responses:
        '200':
          description: a list of animals with their index
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Animals"
              #examples: {"animals": [{"id":1,"name":"lion"}]}
    post:
      description: create an animal
      operationId: createAnimal
      tags:
        - animals
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                id:
                  type: integer
            examples:
              '0':
                value: '{"name":"cat"}'
              '1':
                value: '{"id":2}'
      responses:
        '201':
          description: animal created
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              examples: {}
    delete:
      description: delete an adjective
      operationId: deleteAnimal
      tags:
        - animals
      responses:
        '404':
          description: Delete an Adjective
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              examples: {}
  /animals/{id}:
    get:
      description: get a specific adjective
      operationId: showAnimalsById
      tags:
        - animals
      parameters:
        - name: id
          in: path
          required: true
          description: id of the animal to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Successful
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/Animal"
              # examples: {"animals": [{"id":1,"name":"lion"}]}
  /locations:
    get:
      description: List all locations
      operationId: listlocations
      tags:
        - locations
      responses:
        '200':
          description: a list of locations with their index
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Locations"
              #examples: {"locations": [{"id":1,"name":"mountain"}]}
    post:
      description: create an location
      operationId: createLocation
      tags:
        - locations
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                id:
                  type: integer
            examples:
              '0':
                value: '{"name":"lake"}'
              '1':
                value: '{"id":2}'
      responses:
        '201':
          description: location created
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              examples: {}
    delete:
      description: delete a location
      operationId: deleteLocation
      tags:
        - locations
      responses:
        '404':
          description: Delete a Location
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              examples: {}
  /locations/{id}:
    get:
      description: get a specific location
      operationId: showLocationById
      tags:
        - locations
      parameters:
        - name: id
          in: path
          required: true
          description: id of the location to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Successful
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/Location"
              # examples: {"locations": [{"id":1,"name":"mountain"}]}

components:
  schemas:
    Color:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Colors:
      type: array
      items:
        $ref: "#/components/schemas/Color"
        
        
    Adjective:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
  #      tag:
  #        type: string
    Adjectives:
      type: array
      items:
        $ref: "#/components/schemas/Adjective"
        
    Animal:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
  #      tag:
  #        type: string
    Animals:
      type: array
      items:
        $ref: "#/components/schemas/Animal"
        

    Location:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
  #      tag:
  #        type: string
    Locations:
      type: array
      items:
        $ref: "#/components/schemas/Location"
